node ('XamarinAndroid') 
{
timestamps{
    stage 'Checkout' 
    try    {	
	  //checkout the xamarinandroid-samplebrowser Source	
	  checkout([$class: 'GitSCM', branches: [[name: '*/$githubSourceBranch']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'xamarinandroid-samplebrowser']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.githubCredentialId, url: 'https://github.com/essential-studio/xamarinandroid-samplebrowser.git']]])
	  
	  //checkout the essentialstudio-common Source
	  checkout([$class: 'GitSCM', branches: [[name: '*/development']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'essentialstudio-common']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.githubCredentialId, url: 'https://github.com/essential-studio/essentialstudio-common.git']]])
	  	  
     }
    catch(Exception e)    {	 
	    echo "Exception in 'Checkout' stage \r\n"+ e
        currentBuild.result = 'FAILURE'		
    } 

if(currentBuild.result != 'FAILURE')
{		
	stage 'Build Source'
	try	{	    
 	 
	 gitlabCommitStatus("Build")
	 {
	   
	  bat 'powershell.exe -ExecutionPolicy ByPass -File xamarinandroid-samplebrowser/build/build.ps1 -Script '+env.WORKSPACE+"/xamarinandroid-samplebrowser/build/build.cake -Target build  -nugetserverurl "+env.nugetserverurls +' -StudioVersion  '+env.studio_version
	 
	 }
     
	 def files = findFiles(glob: '**/cireports/errorlogs/*.txt')

        if(files.size() > 0)
        {
           currentBuild.result = 'FAILURE'
        }
    }
	 catch(Exception e) 
    { 
	    echo "Exception in 'Build' stage \r\n"+ e
		currentBuild.result = 'FAILURE'
    }
}
 
if(currentBuild.result != 'FAILURE' && env.publishBranch.contains(githubSourceBranch))
{
	stage 'Publish'
	try
	{
	  //method to get release notes content
	     env.PATH = "C:\\Program Files\\Git\\mingw64\\bin;${env.PATH}"  
       def branchCommit = '"'+'https://api.github.com/repos/essential-studio/xamarinandroid-samplebrowser/pulls/'+ env.pullRequestId +'/commits'
	   String branchCommitDetails = bat returnStdout: true, script: 'curl -H "Accept: application/vnd.github.v3+json" -u SyncfusionBuild:' +env.GithubBuildAutomation_PrivateToken+" "+branchCommit
	  def splitMessageDetails = branchCommitDetails.split('"message": "')
	   def releaseNotesContent=""; 
		for(int k=1; k<splitMessageDetails.size();k++)
		{
			releaseNotesContent += splitMessageDetails[k].split('"tree":')[0].replace("\",","");
		}
		if (releaseNotesContent) 
		{  
		   writeFile file: env.WORKSPACE+"/cireports/releasenotes/releasenotes.txt", text: releaseNotesContent
		}
		else  
		{
		   writeFile file: env.WORKSPACE+"/cireports/releasenotes/releasenotes.txt", text: "No commit details found for this job."
		}
		
	   	  
	  gitlabCommitStatus("Publish")
	    {  
	        bat 'powershell.exe -ExecutionPolicy ByPass -File xamarinandroid-samplebrowser/build/build.ps1 -Script '+env.WORKSPACE+"/xamarinandroid-samplebrowser/build/build.cake -Target publish -apitoken " +env.Hockey_apitoken + " -Scheduler "+env.isScheduler +" -MachineIP "+env.MachineIP+" -SourceBranch "+env.githubSourceBranch
	        
	    }
	}
	catch(Exception e) 
	{
		echo "Exception in 'Publish' stage \r\n"+ e
		currentBuild.result = 'FAILURE'
	}
}
	stage 'Delete Workspace'
	
	// Archiving artifacts when the folder was not empty	
    def files = findFiles(glob: '**/cireports/**/*.*')      
    
    if(files.size() > 0) 		
    { 		
        archiveArtifacts artifacts: 'cireports/', excludes: null 		
    }
	 
	step([$class: 'WsCleanup'])
}
}
